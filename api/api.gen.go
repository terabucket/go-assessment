//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Certificate defines model for Certificate.
type Certificate struct {
	CertificatePemEncoded string             `json:"certificate_pem_encoded"`
	Id                    openapi_types.UUID `json:"id"`
	NotAfter              openapi_types.Date `json:"not_after"`
	NotBefore             openapi_types.Date `json:"not_before"`
	SerialNumber          string             `json:"serial_number"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// ListCertificatesResponse defines model for ListCertificatesResponse.
type ListCertificatesResponse struct {
	Certificates []Certificate `json:"certificates"`
}

// UpdateCertificateRequest defines model for UpdateCertificateRequest.
type UpdateCertificateRequest struct {
	CertificateId openapi_types.UUID `json:"certificate_id"`
	ClientId      openapi_types.UUID `json:"client_id"`
}

// UpdateCertificateResponse defines model for UpdateCertificateResponse.
type UpdateCertificateResponse struct {
	Certificate Certificate        `json:"certificate"`
	ClientId    openapi_types.UUID `json:"client_id"`
}

// PostCertificatesJSONRequestBody defines body for PostCertificates for application/json ContentType.
type PostCertificatesJSONRequestBody = UpdateCertificateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /certificates)
	GetCertificates(w http.ResponseWriter, r *http.Request)

	// (POST /certificates)
	PostCertificates(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetCertificates operation middleware
func (siw *ServerInterfaceWrapper) GetCertificates(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetCertificates(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostCertificates operation middleware
func (siw *ServerInterfaceWrapper) PostCertificates(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostCertificates(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/certificates", wrapper.GetCertificates)
	m.HandleFunc("POST "+options.BaseURL+"/certificates", wrapper.PostCertificates)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xVwWrbQBD9FTHtUVhuetMtLaUEejCBnkIwa2kkb5B2N7OjUGP072V2U1uS5cQFF3qz",
	"tE/z3rx5s95DYVtnDRr2kO/BF1tsVfj5FYl1pQvFKI+OrJM3GA6L4+HaYbtGU9gSSzninUPIwTNpU0Of",
	"gg6vK0utYsih63QJ6SnMWF6ripFG6FLoz6A3WFnCi+AeSatmbbp2EwkmiD4FwudOk/TwAEHhuR5H5EPd",
	"U5rHgxC7ecKCRcg3IkszftoSB7K0YayR5IMWvVc1vq85lDji58h/aM+Dsfp79M4a//Z8w7NmbMOPj4QV",
	"5PAhO+Ymew1NNkxMf6BXRGp3qnZIMKf1p5NZDkre43OHnt/O4oVZKxqNhi9DT4UfPk2nzBe2cYHnf+n0",
	"9duZ6UW+1KaywlGiL0g71tZADreru6SylLTKqFqbOolFfTIacgqsuZGKwwgmt6s7SOEFycdiN4vlYilN",
	"WYdGOQ05fA6vUnCKt8GpbBrPGvlUlqQ9sdVUhViuBHJXQg7fcbQRIO7EAYXCN8tlXE/DaAKHcq4RrLYm",
	"e/JC9OfWfG9oZ7cvWDvWPsAlYrqMVE4CsFJdw1eTFW+kGQ23JkE5S2xRdERYLiLKWT/jdgy6T3iLQ8dD",
	"MNRrIk7cX1l/an9Y8y+23F2txbN3Sd/HffhHEz+//DN2R3A5Mu//Gn0f/0hlVyF/2ENHDeSwZXY+z0Y7",
	"ucBfqnUNLgrbZsrp7OUT9I/97wAAAP//ZOWwsm4IAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
